import zync_houdini as zh
import os.path
import htoa
import zync as z
import re
import glob


#creates an instance of the zync connection, rather than creating a new one
class nd_ZyncConnection(object):
    instance = None

    def __init__(self):
        if not nd_ZyncConnection.instance:
            nd_ZyncConnection.instance = nd_ZyncConnection.ZyncConnectionInner()


    def __getattr__(self, name):
        return getattr(self.instance, name)
    class ZyncConnectionInner(object):
        def __init__(self):
            self.instance_types = {}
            self.project_list = None
            self.zync_conn = z.Zync(application='houdini')

        def submit_job(self, hipPath, submitDict):
            try:
                self.zync_conn.submit_job(
                'houdini', hipPath, submitDict)
                print('Submitted %s to Zync' %submitDict['render_node'])
            except z.ZyncError as e:
                print('Error submitting job: %s' %str(e))


def login(**kwargs):
    zh.ZyncConnection().login()
    zh.update_node_login(kwargs['node'])
    
    
def nd_get_dependencies(frame_begin, frame_end, step, firstFrame):
    """Finds all file dependencies in the project for specific range of frames.

    Args:
      frame_begin: First frame (inclusive) of range to render.
      frame_end: Last frame (inclusive) of range to render.
      step: Frame range step.

    Returns:
      set of str, List of detected dependencies.
    """
    refs = hou.fileReferences()
    if firstFrame:
        frames = xrange(int(1), int(1) + 1, int(1))
    else:
        frames = xrange(int(frame_begin), int(frame_end) + 1, int(step))
    result = set()

    wildcards = ['<udim>', '$SF']
    wildcard_regex = [re.compile(re.escape(wc), re.IGNORECASE)
                      for wc in wildcards]

    for frame in frames:
      for parm, _ in refs:
        if parm:
          file_path = parm.evalAtFrame(frame)
          if file_path in result:
            continue
          for wildcard in wildcard_regex:
            file_path = wildcard.sub('*', file_path)
          for file in glob.glob(file_path):
            try:
              if hou.findFile(file) and file not in result:
                result.add(file)
            except hou.OperationFailed:
              pass        
    return result
    
    
def submit(**kwargs):
    if hou.hipFile.hasUnsavedChanges():
        save_file_response = hou.ui.displayMessage(
        "There are some unsaved changes. Do you want to save the file before "
        "submitting to Zync?", buttons=("Yes", "No", "Cancel"), close_choice=2)
        if save_file_response == 2:
            return
        if save_file_response == 0:
            hou.hipFile.save()
    
    node = kwargs['node']

    
    houJob = zh.ZyncHoudiniJob(node)
    #monkey patch zh to change the way dependices work
    #houJob.get_raw_params = nd_get_raw_params
    #houJob.get_dependencies = nd_get_dependencies
    
    zyncCon = nd_ZyncConnection()
    jobs = []
        
    arRops = node.inputs()
    for arRop in arRops:
        outDir = arRop.parm('ar_picture').evalAsString()
        outDir = os.path.split(outDir)[0]
        outFile = arRop.parm('ar_picture').unexpandedString()
        outFile = os.path.split(outFile)[1]
        if node.evalParm('oF_on'):
            frames = node.parmTuple('oF').eval()
        else:
            frames = arRop.parmTuple('f').eval()        
        houdini_version = hou.applicationVersion()
        submitDict = {'frame_begin': frames[0],
        'num_instances': node.evalParm('num_instances'),
        'skip_download': node.evalParm('skip_download'),
        'frame_end': frames[1],
        'override_res': 0,
        'output_filename': outFile,
        'use_standalone': node.evalParm('use_standalone'),
        'step': frames[2],
        'renderer': 'arnold',
        'chunk_size': node.evalParm('chunk_size'),
        'upload_only': node.evalParm('upload_only'),
        'proj_name': node.evalParm('proj_name'),
        'scene_info': {'houdini_version': 'Houdini%d.%d' % (houdini_version[0], houdini_version[1]),
        'dependencies': list(nd_get_dependencies(frames[0], frames[1], frames[2], node.evalParm('ffDepend'))),
        'renderer_version': htoa.__version__,
        'houdini_build_version': '%d.%d.%d' % houdini_version},
        'plugin_version': zh.__version__,
        'notify_complete': node.evalParm('notify_complete'),
        'priority': node.evalParm('priority'),
        'instance_type': node.evalParm('instance_type'),
        'output_dir': outDir,
        'xres': 1,
        'render_node': arRop.path(),
        'yres': 1}
        #settings on arnold node
        arRop.parm('ar_log_verbosity').set('detailed') #enable better logging
        arRop.parm('ar_exr_autocrop').set(1)
        zyncCon.submit_job(houJob.scene_path(), submitDict)



def chooseProject(**kwargs):
    node = kwargs['node']
    zyncCon = zh.ZyncConnection()
    projList = zyncCon.get_project_list()
    proj = hou.ui.selectFromList([pName['name'] for pName in projList],
        exclusive=True,
        clear_on_cancel=True,
        title='Projects',
        num_visible_rows=len(projList))
    if proj:
        node.parm('proj_name').set(projList[proj[0]]['name'])

def chooseInstance(**kwargs):
    node = kwargs['node']
    zyncCon = zh.ZyncConnection()
    machines = zyncCon.get_machine_types(renderer='houdini')
    machine = hou.ui.selectFromList(machines.keys(),
        exclusive=True,
        clear_on_cancel=True,
        title='Instances',
        num_visible_rows=len(machines))
    if machine:
        machine = machine[0]
        node.parm('instance_type').set(machines.keys()[machine])
