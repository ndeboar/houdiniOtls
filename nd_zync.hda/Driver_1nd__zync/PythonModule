import zync_houdini as zh
import os.path
import htoa
import zync as z

class nd_ZyncConnection(object):
    instance = None

    def __init__(self):
        if not nd_ZyncConnection.instance:
            nd_ZyncConnection.instance = nd_ZyncConnection.ZyncConnectionInner()


    def __getattr__(self, name):
        return getattr(self.instance, name)
    class ZyncConnectionInner(object):
        def __init__(self):
            self.instance_types = {}
            self.project_list = None
            self.zync_conn = z.Zync(application='houdini')

        def submit_job(self, hipPath, submitDict):
            try:
                self.zync_conn.submit_job(
                'houdini', hipPath, submitDict)
                hou.ui.displayMessage(text='Job submitted to Zync.')
                post_submit_job(node)
            except zync.ZyncError as e:
                hou.ui.displayMessage(title='Submission Error',
                text='Error submitting job: %s' % (str(e),),
                severity=hou.severityType.Error)



def login(**kwargs):
    zh.ZyncConnection().login()
    zh.update_node_login(kwargs['node'])

def submit(**kwargs):
    node = kwargs['node']
    houJob = zh.ZyncHoudiniJob(node)
    zyncCon = nd_ZyncConnection()
    jobs = []
        
    arRops = node.inputs()
    for arRop in arRops:
        outDir = arRop.parm('ar_picture').evalAsString()
        outDir = os.path.split(outDir)[0]
        outFile = arRop.parm('ar_picture').unexpandedString()
        outFile = os.path.split(outFile)[1]
        frames = arRop.parmTuple('f').eval()        
        houdini_version = hou.applicationVersion()
        
        submitDict = {'frame_begin': frames[0],
        'num_instances': node.evalParm('num_instances'),
        'skip_download': node.evalParm('skip_download'),
        'frame_end': frames[1],
        'override_res': 0,
        'output_filename': outFile,
        'use_standalone': node.evalParm('use_standalone'),
        'step': frames[2],
        'renderer': 'arnold',
        'chunk_size': node.evalParm('chunk_size'),
        'upload_only': node.evalParm('upload_only'),
        'proj_name': node.evalParm('proj_name'),
        'scene_info': {'houdini_version': 'Houdini%d.%d' % (houdini_version[0], houdini_version[1]),
        'dependencies': list(houJob.get_dependencies(frames[0], frames[1], frames[2])),
        'renderer_version': htoa.__version__,
        'houdini_build_version': '%d.%d.%d' % houdini_version},
        'plugin_version': zh.__version__,
        'notify_complete': node.evalParm('notify_complete'),
        'priority': node.evalParm('priority'),
        'instance_type': node.evalParm('instance_type'),
        'output_dir': outDir,
        'xres': 1,
        'render_node': arRop.path(),
        'yres': 1}
        #print submitDict

        zyncCon.submit_job(houJob.scene_path(), submitDict)



def chooseProject(**kwargs):
    node = kwargs['node']
    zyncCon = zh.ZyncConnection()
    projList = zyncCon.get_project_list()
    proj = hou.ui.selectFromList([pName['name'] for pName in projList],
        exclusive=True,
        title='Projects',
        num_visible_rows=len(projList))
    #print(projList[proj[0]]['name'])
    node.parm('proj_name').set(projList[proj[0]]['name'])
